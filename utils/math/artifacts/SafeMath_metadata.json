{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Collection of functions related to mathematical operation Checked or Unchecked Arithmetic: An overflow or underflow is the situation where the resulting value of an arithmetic operation,  when executed on an unrestricted integer, falls outside the range of the result type.  Prior to Solidity 0.8.0, arithmetic operations would always wrap in case of under- or  overflow leading to widespread use of libraries that introduce additional checks. Since Solidity 0.8.0, all arithmetic operations revert on over- and  underflow by default, thus making the use of these libraries unnecessary. The unchecked block can be used everywhere inside a block, but not as a replacement for a block. It also cannot be nested. The setting only affects the statements that are syntactically inside the block. Functions called from within an unchecked block do not inherit the property.  The following operators will cause a failing assertion on overflow or underflow and will wrap without an error if used inside an unchecked block: ++, --, +, binary -, unary -, *, /, %, ** It is not possible to disable the check for division by zero or modulo by zero using the unchecked block.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"utils/math/SafeMath.sol": "SafeMath"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"utils/math/SafeMath.sol": {
			"keccak256": "0x4ed570b2e4241532775d5b93b3b0faa63a2d5485574caf459119a4f977f4b7c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://7227eeae0775346e011ba93db2a2accaf6ef50c8c1effc81dc5317140a261ee6",
				"dweb:/ipfs/QmWy5HLF2UWRJQLhft2DTB5eF1YHQiFYcBs5FmRnFJjPHq"
			]
		}
	},
	"version": 1
}